{
    "git.ignoreLimitWarning": true,

    // [[General]]
    "breadcrumbs.filePath": "on", // 控制是否及如何在“导航路径”视图中显示文件路径

    // window
    "window.commandCenter": true,
    "window.restoreWindows": "all",
    "window.titleBarStyle": "native",
    "window.menuBarVisibility": "hidden",

    // editor
    "editor.inlayHints.enabled": "off",
    "editor.minimap.renderCharacters": false,
    "explorer.compactFolders": false, // 资源管理器不采用紧凑模式
    "editor.fontFamily": "JetBrains Mono, LXGW Bright", // 编辑器全局字体
    "editor.fontLigatures": true, // 启用连字体
    "editor.fontSize": 15, // 字号
    "editor.lineHeight": 0, // 行高：使用 0 根据字号自动计算行高
    "editor.bracketPairColorization.enabled": true, // 控制是否对括号着色
    "editor.bracketPairColorization.independentColorPoolPerBracketType": false, // 各类括号着色等级不独立
    "editor.guides.bracketPairs": false, // 启用括号指导线
    "editor.guides.bracketPairsHorizontal": "active", // 启用水平括号指导线
    "editor.guides.highlightActiveIndentation": false, // 禁用高亮选中的缩进指导线
    "editor.guides.indentation": false, // 禁用缩进指导线
    "editor.semanticHighlighting.enabled": true, // 颜色主题
    "editor.tokenColorCustomizations": {
        "comments": "#4fd8f1", // 注释
        "keywords": "#ebf441", // 关键字
        "variables": "#f0edf8", // 变量名 
        "strings": "#f464fe", // 字符串
        "functions": "#f6f6ec", // 内置函数名
        "numbers": "#f73131", // 数字
        "types": "#6afc35", //类定义颜色
    },

    // workbench
    "workbench.startupEditor": "none", // 在没有从上一个会话恢复出信息的情况下，在启动时不打开编辑器
    "workbench.iconTheme": "vs-seti",
    "workbench.colorTheme": "Default Dark Modern",
    "workbench.view.alwaysShowHeaderActions": true, // 显示视图头部的操作项
    "workbench.settings.editor": "ui", // 默认打开 settings.json 进行设置
    "workbench.editor.historyBasedLanguageDetection": true, // 允许语言检测使用编辑器历史记

    // debug
    "debug.console.acceptSuggestionOnEnter": "on", // 调试控制台中可以用 enter 接受建议
    "debug.internalConsoleOptions": "neverOpen", // 从不自动打开内部调试控制台

    // editor
    "editor.acceptSuggestionOnEnter": "on", // 编辑器中可以用 enter 接受建议
    "editor.stickyScroll.enabled": false, // 启用粘滞滚动，即显示上一级对应的代码
    "editor.wordBasedSuggestionsMode": "allDocuments", // 建议所有打开文档中的字词
    "editor.unicodeHighlight.ambiguousCharacters": false, // 不突出显示可能与基本 ASCII 字符混淆的字符
    "editor.minimap.enabled": false, // 控制是否显示缩略图cod
    //"editor.formatOnType": true, // 自动格式化
    //"editor.formatOnSave": true, // 保存自动格式化代码
    //"editor.formatOnPaste": true, // 粘贴自动格式化
    "editor.renderWhitespace": "none", // 控制编辑器在空白字符上显示符号的方式
    "editor.snippetSuggestions": "top", // 代码片段建议置于其他建议之上
    "editor.stickyTabStops": true, // 使用空格缩进时模拟制表符的行为，可以方便对齐
    "editor.tabSize": 4, // 一个制表符 = 4个空格
    "editor.suggest.insertMode": "replace", // 建议的接受方式
    "editor.suggest.localityBonus": true, // 控制排序时是否提高靠近光标的词语的优先级
    "editor.suggest.matchOnWordStartOnly": false, // 禁用建议必须匹配开头
    "editor.suggest.shareSuggestSelections": true,
    "editor.suggest.showStatusBar": true, // 控制建议小部件底部的状态栏可见
    "editor.suggestOnTriggerCharacters": true, // 控制在键入触发字符后是否自动显示建议
    "editor.suggestSelection": "first", // 始终预先选择第一个建议
    "editor.wordBasedSuggestions": "allDocuments", // 控制是否根据文档中的文字提供建议列表
    "editor.autoClosingOvertype": "always", // 控制编辑器应当自动改写左引号或右引号
    "editor.detectIndentation": false, // 禁用自动检测文件缩进模式和缩进大小，即打开文件后自动将文件更改为 VSCode 配置的缩进格式
    "editor.quickSuggestionsDelay": 0, // 控制显示快速建议前的等待时间（毫秒）
    "editor.inlineSuggest.enabled": true, // 在编辑器中自动显示内联建议
    "editor.parameterHints.enabled": true, // 是否在输入时显示含有参数文档和类型信息的小面板
    // 控制是否在键入代码时自动显示建议
    "editor.quickSuggestions": {
        //"comments": false, // 键入注释时不允许
        "other": true, // 键入其他时允许
        //"strings": false // 键入字符串时不允许
    },

    // explorer
    "explorer.confirmDragAndDrop": false, // 移动文件时无需确认
    "explorer.confirmDelete": false, // 删除文件确认
    "explorer.incrementalNaming": "smart", // 粘贴同名文件时的重命名方式;smart: 在重复名称末尾智能地添加/递增数字

    // files
    "files.autoSave": "afterDelay", // 自动保存
    "files.hotExit": "onExitAndWindowClose", // 在会话间记住未保存的文件,允许在退出编辑器时跳过保存提示 onExitAndWindowClose: 退出或窗口关闭时

    // notebook
    "notebook.lineNumbers": "on", // 控制单元格编辑器中行号的显示
    // 应该在何处显示单元格工具栏，或是否隐藏它
    "notebook.cellToolbarLocation": {
        "default": "right", // 默认: 右边
        "jupyter-notebook": "left" // jupyter-notebook: 左边
    },

    // search
    "search.showLineNumbers": true, // 显示搜索结果所在行号
    "search.smartCase": true, // 当搜索词为小写时，则不区分大小写进行搜索，否则区分大小写
    // 配置在搜索中排除的文件和文件夹的glob模式
    "search.exclude": {
        // "someFolder/": true,
        // "somefile": true
    },

    // output
    "output.smartScroll.enabled": true, // 输出窗口智能滚动：点击时锁定，点击最后一行时解锁

    // problems
    "problems.showCurrentInStatus": true, // 在状态栏显示当前问题
    "problems.sortOrder": "position", // 控制问题导航的显示顺序
    "json.schemaDownload.enable": true,
    "security.workspace.trust.untrustedFiles": "open",
    "extensions.ignoreRecommendations": true,
    "http.proxySupport": "on",

    // fileheader
    "fileheader.configObj": {
        "autoAdd": false,
        "autoAlready": false,
        "createHeader": false,
        "prohibitAutoAdd": ["py"]
    },
    "fileheader.cursorMode": {
        "description": "", // 函数注释生成之后，光标移动到这里
        "param": "", // param 开启函数参数自动提取 需要将光标放在函数行或者函数上方的空白行
        "return": "",
    },
    "fileheader.customMade": {
        "Author": "cassobee",
        "Date": "",
        "LastEditors": "",
        "LastEditTime": "",
        "Description": "",
    },

    // [[C++]]
    // clangd
    // Clangd 运行参数(终端输入 clangd --help-list-hidden 可查看更多)
    "clangd.arguments": [
        "--all-scopes-completion", // 全局补全(补全建议会给出在当前作用域不可见的索引,插入后自动补充作用域标识符),例如在main()中直接写cout,即使没有`#include <iostream>`,也会给出`std::cout`的建议,配合"--header-insertion=iwyu",还可自动插入缺失的头文件
        "--background-index", // 后台分析并保存索引文件
        "--clang-tidy", // 启用 Clang-Tidy 以提供「静态检查」
        //"--clang-tidy-checks=performance-*, bugprone-*, misc-*, google-*, modernize-*, readability-*, portability-*",
        "--compile-commands-dir=${workspaceFolder}/build", // 编译数据库(compile_commands.json 文件)的目录位置
        "--completion-parse=auto", // 当 clangd 准备就绪时，用它来分析建议
        "--completion-style=detailed", // 建议风格：打包(重载函数只会给出一个建议);还可以设置为 detailed
        //"--query-driver=/usr/bin/g*", // MAC 上需要设定 clang 编译器的路径，也可以是 /usr/local/opt/llvm/bin/clang++
        // 启用配置文件(YAML格式)项目配置文件是在项目文件夹里的“.clangd”,用户配置文件是“clangd/config.yaml”,该文件来自:Windows: %USERPROFILE%\AppData\Local || MacOS: ~/Library/Preferences/ || Others: $XDG_CONFIG_HOME, usually ~/.config
        "--enable-config",
        "--fallback-style=Webkit", // 默认格式化风格: 在没找到 .clang-format 文件时采用,可用的有 LLVM, Google, Chromium, Mozilla, Webkit, Microsoft, GNU
        //"--function-arg-placeholders", // 补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末
        //"--header-insertion-decorators", // 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分
        "--header-insertion=iwyu", // 插入建议时自动引入头文件 iwyu
        //"--include-cleaner-stdlib", // 为标准库头文件启用清理功能(不成熟!!!)
        "--log=verbose", // 让 Clangd 生成更详细的日志
        "--pch-storage=memory", // pch 优化的位置(Memory 或 Disk,前者会增加内存开销，但会提升性能)
        "--pretty", // 输出的 JSON 文件更美观
        "--ranking-model=decision_forest", // 建议的排序方案：hueristics (启发式), decision_forest (决策树)
        "-j=12" // 同时开启的任务数量
    ],
    // 找不到编译数据库(compile_flags.json 文件)时使用的编译器选项,这样的缺陷是不能直接索引同一项目的不同文件,只能分析系统头文件、当前文件和被include的文件
    "clangd.fallbackFlags": [
    ],
    "clangd.checkUpdates": true, // 自动检测 clangd 更新
    "clangd.onConfigChanged": "restart", // 重启 clangd 时重载配置,具体方法: F1 + Fn 打开命令面板，然后搜索“clangd: restart"
    "clangd.serverCompletionRanking": true, // 借助网上的信息排序建议
    "clangd.detectExtensionConflicts": true, // 当其它拓展与 clangd 冲突时警告并建议禁用
    "editor.suggest.snippetsPreventQuickSuggestions": false, // clangd的snippets有很多的跳转点，不用这个就必须手动触发Intellisense了

    // [[Python]]
    "[python]": {
        "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd"
    },
    "python.venvPath": "~/Code/python/pyvenvs", // Python 虚拟环境所在路径
    "python.analysis.typeCheckingMode": "basic",
}